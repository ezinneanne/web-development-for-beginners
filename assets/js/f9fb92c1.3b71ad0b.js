"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3453],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=l,k=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const r={sidebar_position:5},o="Data types in javascript",i={unversionedId:"javascript/datatypes",id:"javascript/datatypes",title:"Data types in javascript",description:"Data types",source:"@site/docs/javascript/datatypes.md",sourceDirName:"javascript",slug:"/javascript/datatypes",permalink:"/web-development-for-beginners/javascript/datatypes",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Variable naming rules and comments",permalink:"/web-development-for-beginners/javascript/variable-naming-rules"},next:{title:"Conditional statements",permalink:"/web-development-for-beginners/javascript/conditional-statements"}},p={},s=[{value:"Data types",id:"data-types",level:2},{value:"String",id:"string",level:3},{value:"Number",id:"number",level:3},{value:"Big int",id:"big-int",level:3},{value:"Boolean",id:"boolean",level:3},{value:"Null",id:"null",level:3},{value:"Undefined",id:"undefined",level:3},{value:"Object",id:"object",level:3},{value:"Symbols",id:"symbols",level:3}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"data-types-in-javascript"},"Data types in javascript"),(0,l.kt)("h2",{id:"data-types"},"Data types"),(0,l.kt)("p",null,"In JavaScript, there are eight data types. It is important to understand the concept of data types so you could apply variables correctly and avoid errors. "),(0,l.kt)("p",null,"For example, combining a string with a number would give a logical error because they are of different data types."),(0,l.kt)("p",null,"The data types in JavaScript are:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"String"),(0,l.kt)("li",{parentName:"ol"},"Number"),(0,l.kt)("li",{parentName:"ol"},"Big int"),(0,l.kt)("li",{parentName:"ol"},"Boolean "),(0,l.kt)("li",{parentName:"ol"},"Null"),(0,l.kt)("li",{parentName:"ol"},"Undefined "),(0,l.kt)("li",{parentName:"ol"},"Objects"),(0,l.kt)("li",{parentName:"ol"},"Symbols")),(0,l.kt)("h3",{id:"string"},"String"),(0,l.kt)("p",null,"String datatype is denoted with single(",(0,l.kt)("inlineCode",{parentName:"p"},"''"),")or double(",(0,l.kt)("inlineCode",{parentName:"p"},'""'),') quotes and recently backticks("``").'),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"let str = \"hello\"\n\nconsole.log(typeof(str));          //hello\n\nlet strs = 'great';\nconsole.log(typeof(strs));       //great\n\nlet s = `greet`;\nconsole.log(typeof(s));          //greet\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"typeof")," keyword is used to show the data type. So when you run the code, you would see ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," which confirms that it is a string datatype."),(0,l.kt)("h3",{id:"number"},"Number"),(0,l.kt)("p",null,"The number data type is denoted with numbers that are stored in 64-bit floating point. Numbers include decimals and whole numbers. When you use double or single quotes on a number. JavaScript converts it as a string. "),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"let x= 200;\n\nlet y = 30.00;\n")),(0,l.kt)("h3",{id:"big-int"},"Big int"),(0,l.kt)("p",null,"Numbers are stored in 64-bit so big int was introduced to accommodate numbers that are longer than 64-bit."),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'let z = BigInt("3000004000005000008000007000002000001111111")\n')),(0,l.kt)("h3",{id:"boolean"},"Boolean"),(0,l.kt)("p",null,"Boolean data type is used to denote ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," ."),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"let a = 2;\nlet b = 3;\nlet c = '2';\n\nconsole.log(a == b);          //false\nconsole.log(a == c);         //true\n")),(0,l.kt)("p",null,"In boolean, the double equals is used to determine the value."),(0,l.kt)("p",null,"In the example above, 2 is equal to 2 because they have the same data type but you get ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when you use the deep equals(",(0,l.kt)("inlineCode",{parentName:"p"},"==="),")."),(0,l.kt)("p",null,"The deep equals determines the value and the data type."),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"let a = 2;\nlet b = 3;\nlet c = '2';\n\nconsole.log(a === b);          //false\nconsole.log(a === c);         //false\n\n")),(0,l.kt)("p",null,"When you run it, you get false because they are not ",(0,l.kt)("em",{parentName:"p"},"deeply equal")," to each other."),(0,l.kt)("h3",{id:"null"},"Null"),(0,l.kt)("p",null,"Null is a data type that is used to indicate an object that does not exist. It is denoted with ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,l.kt)("h3",{id:"undefined"},"Undefined"),(0,l.kt)("p",null,"Undefined is a data type that represents no value. When you declare a variable without assigning a value to it then it becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"let a;\n\nconsole.log(a);          //undefined\n")),(0,l.kt)("h3",{id:"object"},"Object"),(0,l.kt)("p",null,"It is a datatype that allows you to store various collection of entities. Object datatype includes arrays,objects and date."),(0,l.kt)("p",null,"An array consist of items(string,numbers or boolean values) in a square bracket, separated by commas."),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"let arr = ['hello',53,true,'yes'];\n")),(0,l.kt)("p",null,"An object consists of items comprising of various data types enclosed in curly brackets and separated by commas."),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'let obj = {item1:"hello",item2:53,item3:true,item4:"yes"};\n')),(0,l.kt)("p",null,"Objects are written as name:value pairrs"),(0,l.kt)("p",null,"A date is used to specify the date."),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'let dates = new Date("2023-03-03");\n')),(0,l.kt)("h3",{id:"symbols"},"Symbols"),(0,l.kt)("p",null,"Symbols are used to create unique values. Their values do not change and they are unique too."),(0,l.kt)("p",null,"Example,"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"let firstSymbol = Symbol(800);\n\nlet secondSymbol = Symbol(800);\n")),(0,l.kt)("p",null,"Both ",(0,l.kt)("inlineCode",{parentName:"p"},"firstSymbol")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"secondSymbol")," are different even though they have different values."))}d.isMDXComponent=!0}}]);